#include <stdio.h>
#include <stdlib.h>

// Structure to represent a stack
struct Stack {
    char data;
    struct Stack* next;
};

// Function to initialize an empty stack
struct Stack* createStack() {
    return NULL;
}

// Function to push a character onto the stack
void push(struct Stack** top, char data) {
    struct Stack* newNode = (struct Stack*)malloc(sizeof(struct Stack));
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

// Function to pop a character from the stack
char pop(struct Stack** top) {
    if (*top == NULL) {
        return '\0'; // Empty stack
    }
    struct Stack* temp = *top;
    char data = temp->data;
    *top = temp->next;
    free(temp);
    return data;
}

// Function to check if symbols are balanced
int areSymbolsBalanced(char symbols[]) {
    struct Stack* stack = createStack();

    for (int i = 0; symbols[i] != '\0'; i++) {
        if (symbols[i] == '(' || symbols[i] == '{' || symbols[i] == '[') {
            push(&stack, symbols[i]);
        } else if (symbols[i] == ')' || symbols[i] == '}' || symbols[i] == ']') {
            char top = pop(&stack);
            if ((symbols[i] == ')' && top != '(') ||
                (symbols[i] == '}' && top != '{') ||
                (symbols[i] == ']' && top != '[')) {
                return 0; // Unbalanced
            }
        }
    }

    return stack == NULL; // Balanced if the stack is empty
}

int main() {
    char symbols[] = "({[ ]})";
    int result = areSymbolsBalanced(symbols);

    if (result) {
        printf("The symbols are balanced.\n");
    } else {
        printf("The symbols are not balanced.\n");
    }

    return 0;
}
